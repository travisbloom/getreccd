"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""
Defined a Subgraph ID for an object type
"""
directive @subgraphId(id: String!) on OBJECT

type Approval {
  approved: String
  block_number: BigInt!
  contractId_: String!
  id: ID!
  owner: String
  timestamp_: BigInt!
  tokenId: BigInt
  transactionHash_: String!
}

type ApprovalForAll {
  approved: Boolean
  block_number: BigInt!
  contractId_: String!
  id: ID!
  operator: String
  owner: String
  timestamp_: BigInt!
  transactionHash_: String!
}

input ApprovalForAll_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [ApprovalForAll_filter]
  approved: Boolean
  approved_in: [Boolean!]
  approved_not: Boolean
  approved_not_in: [Boolean!]
  block_number: BigInt
  block_number_gt: BigInt
  block_number_gte: BigInt
  block_number_in: [BigInt!]
  block_number_lt: BigInt
  block_number_lte: BigInt
  block_number_not: BigInt
  block_number_not_in: [BigInt!]
  contractId_: String
  contractId__contains: String
  contractId__contains_nocase: String
  contractId__ends_with: String
  contractId__ends_with_nocase: String
  contractId__gt: String
  contractId__gte: String
  contractId__in: [String!]
  contractId__lt: String
  contractId__lte: String
  contractId__not: String
  contractId__not_contains: String
  contractId__not_contains_nocase: String
  contractId__not_ends_with: String
  contractId__not_ends_with_nocase: String
  contractId__not_in: [String!]
  contractId__not_starts_with: String
  contractId__not_starts_with_nocase: String
  contractId__starts_with: String
  contractId__starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  operator: String
  operator_contains: String
  operator_contains_nocase: String
  operator_ends_with: String
  operator_ends_with_nocase: String
  operator_gt: String
  operator_gte: String
  operator_in: [String!]
  operator_lt: String
  operator_lte: String
  operator_not: String
  operator_not_contains: String
  operator_not_contains_nocase: String
  operator_not_ends_with: String
  operator_not_ends_with_nocase: String
  operator_not_in: [String!]
  operator_not_starts_with: String
  operator_not_starts_with_nocase: String
  operator_starts_with: String
  operator_starts_with_nocase: String
  or: [ApprovalForAll_filter]
  owner: String
  owner_contains: String
  owner_contains_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_gt: String
  owner_gte: String
  owner_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_not: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_not_in: [String!]
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  timestamp_: BigInt
  timestamp__gt: BigInt
  timestamp__gte: BigInt
  timestamp__in: [BigInt!]
  timestamp__lt: BigInt
  timestamp__lte: BigInt
  timestamp__not: BigInt
  timestamp__not_in: [BigInt!]
  transactionHash_: String
  transactionHash__contains: String
  transactionHash__contains_nocase: String
  transactionHash__ends_with: String
  transactionHash__ends_with_nocase: String
  transactionHash__gt: String
  transactionHash__gte: String
  transactionHash__in: [String!]
  transactionHash__lt: String
  transactionHash__lte: String
  transactionHash__not: String
  transactionHash__not_contains: String
  transactionHash__not_contains_nocase: String
  transactionHash__not_ends_with: String
  transactionHash__not_ends_with_nocase: String
  transactionHash__not_in: [String!]
  transactionHash__not_starts_with: String
  transactionHash__not_starts_with_nocase: String
  transactionHash__starts_with: String
  transactionHash__starts_with_nocase: String
}

enum ApprovalForAll_orderBy {
  approved
  block_number
  contractId_
  id
  operator
  owner
  timestamp_
  transactionHash_
}

input Approval_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [Approval_filter]
  approved: String
  approved_contains: String
  approved_contains_nocase: String
  approved_ends_with: String
  approved_ends_with_nocase: String
  approved_gt: String
  approved_gte: String
  approved_in: [String!]
  approved_lt: String
  approved_lte: String
  approved_not: String
  approved_not_contains: String
  approved_not_contains_nocase: String
  approved_not_ends_with: String
  approved_not_ends_with_nocase: String
  approved_not_in: [String!]
  approved_not_starts_with: String
  approved_not_starts_with_nocase: String
  approved_starts_with: String
  approved_starts_with_nocase: String
  block_number: BigInt
  block_number_gt: BigInt
  block_number_gte: BigInt
  block_number_in: [BigInt!]
  block_number_lt: BigInt
  block_number_lte: BigInt
  block_number_not: BigInt
  block_number_not_in: [BigInt!]
  contractId_: String
  contractId__contains: String
  contractId__contains_nocase: String
  contractId__ends_with: String
  contractId__ends_with_nocase: String
  contractId__gt: String
  contractId__gte: String
  contractId__in: [String!]
  contractId__lt: String
  contractId__lte: String
  contractId__not: String
  contractId__not_contains: String
  contractId__not_contains_nocase: String
  contractId__not_ends_with: String
  contractId__not_ends_with_nocase: String
  contractId__not_in: [String!]
  contractId__not_starts_with: String
  contractId__not_starts_with_nocase: String
  contractId__starts_with: String
  contractId__starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Approval_filter]
  owner: String
  owner_contains: String
  owner_contains_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_gt: String
  owner_gte: String
  owner_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_not: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_not_in: [String!]
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  timestamp_: BigInt
  timestamp__gt: BigInt
  timestamp__gte: BigInt
  timestamp__in: [BigInt!]
  timestamp__lt: BigInt
  timestamp__lte: BigInt
  timestamp__not: BigInt
  timestamp__not_in: [BigInt!]
  tokenId: BigInt
  tokenId_gt: BigInt
  tokenId_gte: BigInt
  tokenId_in: [BigInt!]
  tokenId_lt: BigInt
  tokenId_lte: BigInt
  tokenId_not: BigInt
  tokenId_not_in: [BigInt!]
  transactionHash_: String
  transactionHash__contains: String
  transactionHash__contains_nocase: String
  transactionHash__ends_with: String
  transactionHash__ends_with_nocase: String
  transactionHash__gt: String
  transactionHash__gte: String
  transactionHash__in: [String!]
  transactionHash__lt: String
  transactionHash__lte: String
  transactionHash__not: String
  transactionHash__not_contains: String
  transactionHash__not_contains_nocase: String
  transactionHash__not_ends_with: String
  transactionHash__not_ends_with_nocase: String
  transactionHash__not_in: [String!]
  transactionHash__not_starts_with: String
  transactionHash__not_starts_with_nocase: String
  transactionHash__starts_with: String
  transactionHash__starts_with_nocase: String
}

enum Approval_orderBy {
  approved
  block_number
  contractId_
  id
  owner
  timestamp_
  tokenId
  transactionHash_
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"8 bytes signed integer\n"
scalar Int8

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
  asc
  desc
}

type Query {
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
  approval(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Approval
  approvalForAll(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ApprovalForAll
  approvalForAlls(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ApprovalForAll_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ApprovalForAll_filter
  ): [ApprovalForAll!]!
  approvals(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Approval_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Approval_filter
  ): [Approval!]!
  recommended(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Recommended
  recommendeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Recommended_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Recommended_filter
  ): [Recommended!]!
  transfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Transfer_filter
  ): [Transfer!]!
}

type Recommended {
  block_number: BigInt!
  contractId_: String!
  data_description: String
  data_receiverAddress: String
  data_receiverName: String
  data_senderAddress: String
  data_senderName: String
  id: ID!
  timestamp_: BigInt!
  tokenId: BigInt
  transactionHash_: String!
}

input Recommended_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [Recommended_filter]
  block_number: BigInt
  block_number_gt: BigInt
  block_number_gte: BigInt
  block_number_in: [BigInt!]
  block_number_lt: BigInt
  block_number_lte: BigInt
  block_number_not: BigInt
  block_number_not_in: [BigInt!]
  contractId_: String
  contractId__contains: String
  contractId__contains_nocase: String
  contractId__ends_with: String
  contractId__ends_with_nocase: String
  contractId__gt: String
  contractId__gte: String
  contractId__in: [String!]
  contractId__lt: String
  contractId__lte: String
  contractId__not: String
  contractId__not_contains: String
  contractId__not_contains_nocase: String
  contractId__not_ends_with: String
  contractId__not_ends_with_nocase: String
  contractId__not_in: [String!]
  contractId__not_starts_with: String
  contractId__not_starts_with_nocase: String
  contractId__starts_with: String
  contractId__starts_with_nocase: String
  data_description: String
  data_description_contains: String
  data_description_contains_nocase: String
  data_description_ends_with: String
  data_description_ends_with_nocase: String
  data_description_gt: String
  data_description_gte: String
  data_description_in: [String!]
  data_description_lt: String
  data_description_lte: String
  data_description_not: String
  data_description_not_contains: String
  data_description_not_contains_nocase: String
  data_description_not_ends_with: String
  data_description_not_ends_with_nocase: String
  data_description_not_in: [String!]
  data_description_not_starts_with: String
  data_description_not_starts_with_nocase: String
  data_description_starts_with: String
  data_description_starts_with_nocase: String
  data_receiverAddress: String
  data_receiverAddress_contains: String
  data_receiverAddress_contains_nocase: String
  data_receiverAddress_ends_with: String
  data_receiverAddress_ends_with_nocase: String
  data_receiverAddress_gt: String
  data_receiverAddress_gte: String
  data_receiverAddress_in: [String!]
  data_receiverAddress_lt: String
  data_receiverAddress_lte: String
  data_receiverAddress_not: String
  data_receiverAddress_not_contains: String
  data_receiverAddress_not_contains_nocase: String
  data_receiverAddress_not_ends_with: String
  data_receiverAddress_not_ends_with_nocase: String
  data_receiverAddress_not_in: [String!]
  data_receiverAddress_not_starts_with: String
  data_receiverAddress_not_starts_with_nocase: String
  data_receiverAddress_starts_with: String
  data_receiverAddress_starts_with_nocase: String
  data_receiverName: String
  data_receiverName_contains: String
  data_receiverName_contains_nocase: String
  data_receiverName_ends_with: String
  data_receiverName_ends_with_nocase: String
  data_receiverName_gt: String
  data_receiverName_gte: String
  data_receiverName_in: [String!]
  data_receiverName_lt: String
  data_receiverName_lte: String
  data_receiverName_not: String
  data_receiverName_not_contains: String
  data_receiverName_not_contains_nocase: String
  data_receiverName_not_ends_with: String
  data_receiverName_not_ends_with_nocase: String
  data_receiverName_not_in: [String!]
  data_receiverName_not_starts_with: String
  data_receiverName_not_starts_with_nocase: String
  data_receiverName_starts_with: String
  data_receiverName_starts_with_nocase: String
  data_senderAddress: String
  data_senderAddress_contains: String
  data_senderAddress_contains_nocase: String
  data_senderAddress_ends_with: String
  data_senderAddress_ends_with_nocase: String
  data_senderAddress_gt: String
  data_senderAddress_gte: String
  data_senderAddress_in: [String!]
  data_senderAddress_lt: String
  data_senderAddress_lte: String
  data_senderAddress_not: String
  data_senderAddress_not_contains: String
  data_senderAddress_not_contains_nocase: String
  data_senderAddress_not_ends_with: String
  data_senderAddress_not_ends_with_nocase: String
  data_senderAddress_not_in: [String!]
  data_senderAddress_not_starts_with: String
  data_senderAddress_not_starts_with_nocase: String
  data_senderAddress_starts_with: String
  data_senderAddress_starts_with_nocase: String
  data_senderName: String
  data_senderName_contains: String
  data_senderName_contains_nocase: String
  data_senderName_ends_with: String
  data_senderName_ends_with_nocase: String
  data_senderName_gt: String
  data_senderName_gte: String
  data_senderName_in: [String!]
  data_senderName_lt: String
  data_senderName_lte: String
  data_senderName_not: String
  data_senderName_not_contains: String
  data_senderName_not_contains_nocase: String
  data_senderName_not_ends_with: String
  data_senderName_not_ends_with_nocase: String
  data_senderName_not_in: [String!]
  data_senderName_not_starts_with: String
  data_senderName_not_starts_with_nocase: String
  data_senderName_starts_with: String
  data_senderName_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Recommended_filter]
  timestamp_: BigInt
  timestamp__gt: BigInt
  timestamp__gte: BigInt
  timestamp__in: [BigInt!]
  timestamp__lt: BigInt
  timestamp__lte: BigInt
  timestamp__not: BigInt
  timestamp__not_in: [BigInt!]
  tokenId: BigInt
  tokenId_gt: BigInt
  tokenId_gte: BigInt
  tokenId_in: [BigInt!]
  tokenId_lt: BigInt
  tokenId_lte: BigInt
  tokenId_not: BigInt
  tokenId_not_in: [BigInt!]
  transactionHash_: String
  transactionHash__contains: String
  transactionHash__contains_nocase: String
  transactionHash__ends_with: String
  transactionHash__ends_with_nocase: String
  transactionHash__gt: String
  transactionHash__gte: String
  transactionHash__in: [String!]
  transactionHash__lt: String
  transactionHash__lte: String
  transactionHash__not: String
  transactionHash__not_contains: String
  transactionHash__not_contains_nocase: String
  transactionHash__not_ends_with: String
  transactionHash__not_ends_with_nocase: String
  transactionHash__not_in: [String!]
  transactionHash__not_starts_with: String
  transactionHash__not_starts_with_nocase: String
  transactionHash__starts_with: String
  transactionHash__starts_with_nocase: String
}

enum Recommended_orderBy {
  block_number
  contractId_
  data_description
  data_receiverAddress
  data_receiverName
  data_senderAddress
  data_senderName
  id
  timestamp_
  tokenId
  transactionHash_
}

type Subscription {
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
  approval(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Approval
  approvalForAll(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ApprovalForAll
  approvalForAlls(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ApprovalForAll_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ApprovalForAll_filter
  ): [ApprovalForAll!]!
  approvals(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Approval_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Approval_filter
  ): [Approval!]!
  recommended(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Recommended
  recommendeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Recommended_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Recommended_filter
  ): [Recommended!]!
  transfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Transfer_filter
  ): [Transfer!]!
}

type Transfer {
  block_number: BigInt!
  contractId_: String!
  from: String
  id: ID!
  timestamp_: BigInt!
  to: String
  tokenId: BigInt
  transactionHash_: String!
}

input Transfer_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  and: [Transfer_filter]
  block_number: BigInt
  block_number_gt: BigInt
  block_number_gte: BigInt
  block_number_in: [BigInt!]
  block_number_lt: BigInt
  block_number_lte: BigInt
  block_number_not: BigInt
  block_number_not_in: [BigInt!]
  contractId_: String
  contractId__contains: String
  contractId__contains_nocase: String
  contractId__ends_with: String
  contractId__ends_with_nocase: String
  contractId__gt: String
  contractId__gte: String
  contractId__in: [String!]
  contractId__lt: String
  contractId__lte: String
  contractId__not: String
  contractId__not_contains: String
  contractId__not_contains_nocase: String
  contractId__not_ends_with: String
  contractId__not_ends_with_nocase: String
  contractId__not_in: [String!]
  contractId__not_starts_with: String
  contractId__not_starts_with_nocase: String
  contractId__starts_with: String
  contractId__starts_with_nocase: String
  from: String
  from_contains: String
  from_contains_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_gt: String
  from_gte: String
  from_in: [String!]
  from_lt: String
  from_lte: String
  from_not: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_not_in: [String!]
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Transfer_filter]
  timestamp_: BigInt
  timestamp__gt: BigInt
  timestamp__gte: BigInt
  timestamp__in: [BigInt!]
  timestamp__lt: BigInt
  timestamp__lte: BigInt
  timestamp__not: BigInt
  timestamp__not_in: [BigInt!]
  to: String
  to_contains: String
  to_contains_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_gt: String
  to_gte: String
  to_in: [String!]
  to_lt: String
  to_lte: String
  to_not: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_not_in: [String!]
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  tokenId: BigInt
  tokenId_gt: BigInt
  tokenId_gte: BigInt
  tokenId_in: [BigInt!]
  tokenId_lt: BigInt
  tokenId_lte: BigInt
  tokenId_not: BigInt
  tokenId_not_in: [BigInt!]
  transactionHash_: String
  transactionHash__contains: String
  transactionHash__contains_nocase: String
  transactionHash__ends_with: String
  transactionHash__ends_with_nocase: String
  transactionHash__gt: String
  transactionHash__gte: String
  transactionHash__in: [String!]
  transactionHash__lt: String
  transactionHash__lte: String
  transactionHash__not: String
  transactionHash__not_contains: String
  transactionHash__not_contains_nocase: String
  transactionHash__not_ends_with: String
  transactionHash__not_ends_with_nocase: String
  transactionHash__not_in: [String!]
  transactionHash__not_starts_with: String
  transactionHash__not_starts_with_nocase: String
  transactionHash__starts_with: String
  transactionHash__starts_with_nocase: String
}

enum Transfer_orderBy {
  block_number
  contractId_
  from
  id
  timestamp_
  to
  tokenId
  transactionHash_
}

type _Block_ {
  """
  The hash of the block
  """
  hash: Bytes

  """
  The block number
  """
  number: Int!

  """
  Integer representation of the timestamp stored in blocks for the chain
  """
  timestamp: Int
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """
  The deployment ID
  """
  deployment: String!

  """
  If `true`, the subgraph encountered indexing errors at some past block
  """
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """
  Data will be returned even if the subgraph has indexing errors
  """
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
